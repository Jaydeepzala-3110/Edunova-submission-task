import TransactionModel from '../model/transaction.model.js';
import BooksModel from '../model/books.model.js';
import UserModel from '../model/user.model.js';

// Issue a book
export const issueBook = async (req, res) => {
  const { bookId, userId, issueDate } = req.body;

  try {

    const user = await UserModel.findById(userId);
    if (!user) {
      return res.status(404).json({ message: "User not found" });
    }

    const book = await BooksModel.findById(bookId);
    if (!book) {
      return res.status(404).json({ message: "Book not found" });
    }

    const newTransaction = await TransactionModel.create({
      bookId,
      userId,
      issueDate
    });

    res.status(201).json(newTransaction);
  } catch (error) {
    res.status(500).json({ message: 'Error issuing book', error: error.message });
  }
};

// Return a book and calculate rent
export const returnBook = async (req, res) => {
  const { transactionId, returnDate } = req.body;

  try {

    const transaction = await TransactionModel.findById(transactionId);
    if (!transaction) {
      return res.status(404).json({ message: 'Transaction not found' });
    }

    const issueDate = transaction.issueDate;
    const daysRented = Math.ceil((new Date(returnDate) - new Date(issueDate)) / (1000 * 60 * 60 * 24));
    const book = await BooksModel.findById(transaction.bookId);

    const rentCalculated = daysRented * book.rentPerDay;

    transaction.returnDate = returnDate;
    transaction.rentCalculated = rentCalculated;
    await transaction.save();

    res.status(200).json({ message: 'Book returned', rent: rentCalculated });
  } catch (error) {
    res.status(500).json({ message: 'Error returning book', error: error.message });
  }
};

// Get people who have issued a book
export const getIssuedBookUsers = async (req, res) => {
  const { bookId } = req.query;

  try {
    const transactions = await TransactionModel.find({ bookId }).populate('userId');

    const currentlyIssued = transactions.filter(txn => !txn.returnDate);
    const totalCount = transactions.length;

    res.status(200).json({
      totalCount,
      currentlyIssued: currentlyIssued.length ? currentlyIssued[0].userId : null,
      transactions
    });
  } catch (error) {
    res.status(500).json({ message: 'Error retrieving issued book info', error: error.message });
  }
};

// Get total rent generated by a book
export const getTotalRentByBook = async (req, res) => {
  const { bookId } = req.query;

  try {
    const transactions = await TransactionModel.find({ bookId, rentCalculated: { $exists: true } });
    const totalRent = transactions.reduce((acc, txn) => acc + txn.rentCalculated, 0);

    res.status(200).json({ totalRent });
  } catch (error) {
    res.status(500).json({ message: 'Error retrieving rent info', error: error.message });
  }
};

// Get books issued to a user
export const getBooksIssuedToUser = async (req, res) => {
  const { userId } = req.query;

  try {
    const transactions = await TransactionModel.find({ userId }).populate('bookId');

    res.status(200).json(transactions);
  } catch (error) {
    res.status(500).json({ message: 'Error retrieving issued books for user', error: error.message });
  }
};

// Get books issued in a date range
export const getBooksIssuedInDateRange = async (req, res) => {
  const { startDate, endDate } = req.query;

  try {
    const transactions = await TransactionModel.find({
      issueDate: { $gte: new Date(startDate), $lte: new Date(endDate) }
    }).populate('userId bookId');

    res.status(200).json(transactions);
  } catch (error) {
    res.status(500).json({ message: 'Error retrieving issued books in date range', error: error.message });
  }
};
